"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePushNotificationToken = exports.showMessaging = exports.logoutUser = exports.loginUser = exports.initialize = void 0;
var _reactNative = require("react-native");
const LINKING_ERROR = `The package 'react-native-zendesk-messaging' doesn't seem to be linked. Make sure: \n\n` + _reactNative.Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n' + '- You are not using Expo managed workflow\n';
const ZendeskMessaging = _reactNative.NativeModules.ZendeskMessaging ? _reactNative.NativeModules.ZendeskMessaging : new Proxy({}, {
  get() {
    throw new Error(LINKING_ERROR);
  }
});
const initialize = async (channelKey, onSuccess, onError) => {
  try {
    await ZendeskMessaging.initialize(channelKey);
    onSuccess && onSuccess();
  } catch (err) {
    onError && onError(err);
  }
};
exports.initialize = initialize;
const showMessaging = () => {
  return ZendeskMessaging.showMessaging();
};
exports.showMessaging = showMessaging;
const loginUser = async (token, onSuccess, onError) => {
  try {
    const user = await ZendeskMessaging.loginUser(token);
    onSuccess && onSuccess(user);
  } catch (err) {
    onError && onError(err);
  }
};
exports.loginUser = loginUser;
const logoutUser = async (onSuccess, onError) => {
  try {
    await ZendeskMessaging.logoutUser();
    onSuccess && onSuccess();
  } catch (err) {
    onError && onError(err);
  }
};
exports.logoutUser = logoutUser;
const updatePushNotificationToken = async (token, onSuccess, onError) => {
  try {
    await ZendeskMessaging.updatePushNotificationToken(token);
    onSuccess && onSuccess();
  } catch (err) {
    onError && onError(err);
  }
};
exports.updatePushNotificationToken = updatePushNotificationToken;
//# sourceMappingURL=index.js.map