{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar rs = require('jsrsasign');\nimport postAsForm from \"./postAsForm\";\nvar encodeJWT = function encodeJWT(options) {\n  if (!options) {\n    throw new Error('options is required');\n  }\n  if (!options.email) {\n    throw new Error('options.email is required');\n  }\n  if (!options.scopes) {\n    throw new Error('options.scopes is required');\n  }\n  if (!Array.isArray(options.scopes)) {\n    throw new Error('options.scopes must be an array');\n  }\n  if (options.scopes.length === 0) {\n    throw new Error('options.scopes must contain at least one scope');\n  }\n  if (!options.key) {\n    throw new Error('options.key is required');\n  }\n  var iat = Math.floor(new Date().getTime() / 1000),\n    exp = iat + Math.floor((options.expiration || 60 * 60 * 1000) / 1000),\n    claims = {\n      iss: options.email,\n      scope: options.scopes.join(' '),\n      aud: 'https://accounts.google.com/o/oauth2/token',\n      exp: exp,\n      iat: iat,\n      sub: null\n    };\n  if (options.delegationEmail) {\n    claims.sub = options.delegationEmail;\n  }\n  var sHeader = JSON.stringify({\n    alg: 'RS256',\n    typ: 'JWT'\n  });\n  return rs.jws.JWS.sign(\"RS256\", sHeader, JSON.stringify(claims), options.key);\n};\nvar authenticate = function () {\n  var _ref = _asyncToGenerator(function* (email, key, scopes) {\n    var json = yield postAsForm('https://accounts.google.com/o/oauth2/token', {\n      grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n      assertion: encodeJWT({\n        email: email,\n        key: key,\n        scopes: scopes\n      })\n    });\n    return JSON.parse(json).access_token;\n  });\n  return function authenticate(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default authenticate;","map":{"version":3,"names":["rs","require","postAsForm","encodeJWT","options","Error","email","scopes","Array","isArray","length","key","iat","Math","floor","Date","getTime","exp","expiration","claims","iss","scope","join","aud","sub","delegationEmail","sHeader","JSON","stringify","alg","typ","jws","JWS","sign","authenticate","_ref","_asyncToGenerator","json","grant_type","assertion","parse","access_token","_x","_x2","_x3","apply","arguments"],"sources":["C:/Users/pgome/OneDrive/Escritorio/appTutor/node_modules/react-native-dialogflow/js/googleAuth/GoogleAuth.js"],"sourcesContent":["var rs = require('jsrsasign');\nimport postAsForm from './postAsForm';\n\n\nconst encodeJWT = function (options) {\n\n    if (!options) { throw new Error('options is required'); }\n    if (!options.email) { throw new Error('options.email is required'); }\n    if (!options.scopes) { throw new Error('options.scopes is required'); }\n    if (!Array.isArray(options.scopes)) { throw new Error('options.scopes must be an array'); }\n    if (options.scopes.length === 0) { throw new Error('options.scopes must contain at least one scope'); }\n    if (!options.key) { throw new Error('options.key is required'); }\n\n\n    var iat = Math.floor(new Date().getTime() / 1000),\n        exp = iat + Math.floor((options.expiration || 60 * 60 * 1000) / 1000),\n        claims = {\n            iss: options.email,\n            scope: options.scopes.join(' '),\n            aud: 'https://accounts.google.com/o/oauth2/token',\n            exp: exp,\n            iat: iat,\n            sub: null\n        };\n\n    if (options.delegationEmail) {\n        claims.sub = options.delegationEmail;\n    }\n\n    // Sign JWT\n    var sHeader = JSON.stringify({ alg: 'RS256', typ: 'JWT' });\n    return rs.jws.JWS.sign(\"RS256\", sHeader, JSON.stringify(claims), options.key);\n}\n\nconst authenticate = async (email, key, scopes) => {\n\n    const json = await postAsForm('https://accounts.google.com/o/oauth2/token',\n        {\n            grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n            assertion: encodeJWT({ email, key, scopes })\n        });\n\n    return JSON.parse(json).access_token;\n}\n\nexport default authenticate;"],"mappings":";AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC7B,OAAOC,UAAU;AAGjB,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAaC,OAAO,EAAE;EAEjC,IAAI,CAACA,OAAO,EAAE;IAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EAAE;EACxD,IAAI,CAACD,OAAO,CAACE,KAAK,EAAE;IAAE,MAAM,IAAID,KAAK,CAAC,2BAA2B,CAAC;EAAE;EACpE,IAAI,CAACD,OAAO,CAACG,MAAM,EAAE;IAAE,MAAM,IAAIF,KAAK,CAAC,4BAA4B,CAAC;EAAE;EACtE,IAAI,CAACG,KAAK,CAACC,OAAO,CAACL,OAAO,CAACG,MAAM,CAAC,EAAE;IAAE,MAAM,IAAIF,KAAK,CAAC,iCAAiC,CAAC;EAAE;EAC1F,IAAID,OAAO,CAACG,MAAM,CAACG,MAAM,KAAK,CAAC,EAAE;IAAE,MAAM,IAAIL,KAAK,CAAC,gDAAgD,CAAC;EAAE;EACtG,IAAI,CAACD,OAAO,CAACO,GAAG,EAAE;IAAE,MAAM,IAAIN,KAAK,CAAC,yBAAyB,CAAC;EAAE;EAGhE,IAAIO,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC;IAC7CC,GAAG,GAAGL,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACV,OAAO,CAACc,UAAU,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,CAAC;IACrEC,MAAM,GAAG;MACLC,GAAG,EAAEhB,OAAO,CAACE,KAAK;MAClBe,KAAK,EAAEjB,OAAO,CAACG,MAAM,CAACe,IAAI,CAAC,GAAG,CAAC;MAC/BC,GAAG,EAAE,4CAA4C;MACjDN,GAAG,EAAEA,GAAG;MACRL,GAAG,EAAEA,GAAG;MACRY,GAAG,EAAE;IACT,CAAC;EAEL,IAAIpB,OAAO,CAACqB,eAAe,EAAE;IACzBN,MAAM,CAACK,GAAG,GAAGpB,OAAO,CAACqB,eAAe;EACxC;EAGA,IAAIC,OAAO,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAEC,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAM,CAAC,CAAC;EAC1D,OAAO9B,EAAE,CAAC+B,GAAG,CAACC,GAAG,CAACC,IAAI,CAAC,OAAO,EAAEP,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACT,MAAM,CAAC,EAAEf,OAAO,CAACO,GAAG,CAAC;AACjF,CAAC;AAED,IAAMuB,YAAY;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAO9B,KAAK,EAAEK,GAAG,EAAEJ,MAAM,EAAK;IAE/C,IAAM8B,IAAI,SAASnC,UAAU,CAAC,4CAA4C,EACtE;MACIoC,UAAU,EAAE,6CAA6C;MACzDC,SAAS,EAAEpC,SAAS,CAAC;QAAEG,KAAK,EAALA,KAAK;QAAEK,GAAG,EAAHA,GAAG;QAAEJ,MAAM,EAANA;MAAO,CAAC;IAC/C,CAAC,CAAC;IAEN,OAAOoB,IAAI,CAACa,KAAK,CAACH,IAAI,CAAC,CAACI,YAAY;EACxC,CAAC;EAAA,gBATKP,YAAYA,CAAAQ,EAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAAT,IAAA,CAAAU,KAAA,OAAAC,SAAA;EAAA;AAAA,GASjB;AAED,eAAeZ,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}